// Code generated by go-bindata.
// sources:
// appengine/template/index.html
// appengine/template/u.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appengineTemplateIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\x51\x6b\xdc\x3c\x10\x7c\xb6\x7f\xc5\x7e\x17\x08\x5f\x21\x77\x3a\xa7\xe5\x1a\x7c\x8a\xa1\x34\xa5\xf4\x29\x85\xe4\xa5\x8f\xb2\xb4\xb6\xc5\xc9\x92\x90\xd6\xb1\xaf\xa5\xff\xbd\xe8\xec\xbb\xa6\x50\x28\xc6\x18\x8f\x76\x66\x76\x67\xc5\xff\x7b\x78\xfc\xf8\xfc\xed\xeb\x27\xe8\xa8\x37\x55\xce\xcf\x1f\x14\xaa\xca\x33\x4e\x9a\x0c\x56\x4f\x32\xb8\xba\x36\xc8\xd9\xfc\x9f\x67\xdc\x68\x7b\x80\x80\xe6\x7e\x15\xe9\x68\x30\x76\x88\xb4\x82\x2e\x60\x73\xbf\x62\x91\x04\x69\xc9\x64\x8c\xac\x71\x96\x36\x32\xc6\xd5\x3f\x49\x4a\x47\x3a\x51\x7a\xa1\xed\x85\x72\x2a\xac\xf2\xac\x76\xea\x08\x3f\xf2\x2c\xf3\x42\x29\x6d\xdb\x12\x8a\xad\x9f\xf6\x79\x06\x00\xd0\x8b\x69\x3d\x6a\x45\x5d\x09\xef\xb7\x33\xfc\x33\xcf\xb3\x7a\x20\x72\x36\xb1\x52\x51\x2d\xe4\xa1\x0d\x6e\xb0\xaa\x84\xab\x46\xa6\x67\xa1\x4b\x67\x5c\x28\xe1\x6a\xb7\xdb\x2d\x48\xed\x82\xc2\xb0\x0e\x42\xe9\x21\x96\xf0\xf6\xb7\xd5\xc5\x7e\xe7\x27\x28\xde\x5d\xf0\x34\xe7\x3a\xea\xef\x58\x42\x51\x5c\x50\x39\x84\x98\xa4\xbd\xd3\x96\x30\x5c\xd4\xa7\x75\xec\x84\x72\x63\x09\x45\x92\x59\xde\xad\x9f\xe0\x4a\xca\x73\x5b\x84\x13\xad\x29\x08\x1b\x1b\x17\xfa\x12\x06\xef\x31\x48\x11\xf1\xb5\xe5\x88\xba\xed\xe8\x34\xf7\x69\xea\x8c\xb3\x25\x32\xce\xe6\x25\xf2\x14\x5d\x8a\xb2\x2b\xaa\xb8\x2c\x72\x23\x8c\x41\x83\x1b\x29\x39\xeb\x8a\x74\xe8\xab\x67\x07\x2d\x12\x44\x12\x81\x50\xdd\x00\x17\xcb\x66\x56\x55\xd4\xad\x05\x6d\x61\xd4\xd4\xc1\x67\xe7\xda\x74\x15\x44\xb5\xe1\xcc\xcf\xdc\x2f\x0d\x1c\xdd\x00\x07\xeb\x46\xa0\x0e\x61\x88\x18\xac\xe8\x11\x5c\x03\x02\x7c\x70\x8d\x36\x78\x03\x2f\x3a\x6a\x02\x2e\xfe\xd2\x07\x1b\xd8\xb5\xa1\xfd\x99\x78\xdd\xd2\xfe\x4f\x8b\x57\xed\x3c\xb8\xd1\x1a\x27\x54\x2a\x80\xb3\x14\x08\xef\xa1\x71\x01\x7a\x21\x1f\x9f\xe0\xff\x97\x62\xb3\xbd\x81\xc1\x2b\x41\xa8\xe0\xc3\xd0\xc2\xed\x1d\xdc\x6e\x8b\xbb\x37\x27\x49\xce\xe6\x58\x38\x9b\x6f\xfc\xaf\x00\x00\x00\xff\xff\xbe\x50\xc2\x2a\x09\x03\x00\x00")

func appengineTemplateIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateIndexHtml,
		"appengine/template/index.html",
	)
}

func appengineTemplateIndexHtml() (*asset, error) {
	bytes, err := appengineTemplateIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/index.html", size: 777, mode: os.FileMode(420), modTime: time.Unix(1535509848, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appengineTemplateUHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func appengineTemplateUHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateUHtml,
		"appengine/template/u.html",
	)
}

func appengineTemplateUHtml() (*asset, error) {
	bytes, err := appengineTemplateUHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/u.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1535507011, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"appengine/template/index.html": appengineTemplateIndexHtml,
	"appengine/template/u.html": appengineTemplateUHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"appengine": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{appengineTemplateIndexHtml, map[string]*bintree{}},
			"u.html": &bintree{appengineTemplateUHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

