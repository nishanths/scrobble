// Code generated by go-bindata.
// sources:
// appengine/template/index.html
// appengine/template/u.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appengineTemplateIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x5b\x6f\xdb\x38\x13\x7d\x96\x7f\xc5\x7c\x0a\x3e\xc4\x2e\xac\x8b\xb7\x49\xba\x50\x65\x03\xbb\x6d\xf6\x61\x51\x6c\x83\x26\x7d\xd8\x47\x9a\x1a\x59\x6c\x28\x92\x4b\x8e\x62\x6b\x5d\xff\xf7\x05\x25\xf9\xd2\x34\x69\x0a\x23\xb0\x32\x97\xc3\x33\x67\x86\x23\xe7\xff\x7b\xff\xf1\xdd\xdd\xdf\x37\xd7\x50\x51\x2d\x17\xa3\x7c\xff\x85\xac\x58\x8c\x82\x9c\x04\x49\x5c\x6c\xb7\xf1\x9d\x7f\xd8\xed\xf2\xa4\xb7\x8c\x82\x5c\x0a\x75\x0f\x16\xe5\x3c\x74\xd4\x4a\x74\x15\x22\x85\x50\x59\x2c\xe7\x61\xe2\x88\x91\xe0\x09\x77\x2e\x29\xb5\xa2\x98\x3b\x17\xbe\x98\x54\x08\x47\x5d\x4a\xcd\x84\x3a\xa4\x74\x81\x8b\x51\xe0\x99\xc1\x76\x14\x04\x35\xdb\x44\x15\x8a\x55\x45\x19\xcc\xd2\xf4\xff\x6f\x47\x01\x00\xc0\x23\xd3\x6e\x34\x0a\x96\xba\x68\x87\x14\xbb\x12\x2a\x83\x14\x58\x43\x7a\x48\x58\x8b\x82\xaa\x0c\xde\xa4\xa9\xd9\x0c\xa6\x42\x38\x23\x59\x9b\x41\x29\x71\x6f\xf3\x8f\x51\x21\x2c\x72\x12\x5a\x65\xc0\xb5\x6c\x6a\x35\x38\xbf\x34\x8e\x44\xd9\x46\x5c\x2b\x42\x45\x19\x70\x54\x84\x76\xf0\xfe\x1c\xd3\xee\x10\xad\x28\x2a\x59\x2d\x64\x9b\x41\x68\xac\xde\x88\x9a\x81\xd2\x0f\x2c\x1c\x6a\xf1\x1d\x41\xdb\x55\x63\xb4\x13\x3d\x17\x8b\x92\x91\x78\xc0\x7d\xcc\xac\xf3\x77\x60\x4e\xfc\x8b\x19\xfc\x12\x5f\x62\x3d\x9c\xc1\xb5\xd4\x36\x03\x38\x9b\xcd\x66\x83\x49\x22\x11\xda\xc8\x19\xc6\x85\x5a\x65\x10\xa5\x71\x7a\x4c\x20\xdc\x50\xc4\xa4\x58\xa9\x47\x75\x75\x07\xac\x87\x2a\x2e\xd2\x74\x30\x1f\x79\xb1\xa5\xd3\xb2\x21\xdc\x03\x69\x93\x41\x34\x7b\x41\xe8\x1f\x6b\xd9\xf1\x88\x04\x61\xed\xbe\x53\xd9\x37\x37\x92\x58\x52\x76\xda\xdf\xc1\x6e\x7b\x9a\x27\x8e\x3e\x72\xcf\x7a\xf0\xa7\x83\x86\x42\x99\x86\x3a\x19\x75\x43\x52\x28\xcc\x00\x94\x56\x78\x5a\x7a\xaf\xed\xeb\xab\x6f\xdb\xb7\x17\xe4\xcd\x41\x90\xef\xe4\x8d\xd3\x8b\x83\xba\xd1\x1a\x97\xf7\x82\xa2\xaa\x35\x15\x2a\x97\x9d\x9e\x12\xd5\xee\x49\xfb\x53\x36\xcf\xf1\x38\x65\xf1\xbe\xb5\x4b\x6d\x0b\xb4\xd9\x33\xdc\x2f\x4e\xe6\x62\xc9\xf8\xfd\xca\xea\x46\x15\x19\xd8\xd5\x72\x9c\x4e\xbb\x4f\x9c\x5e\x4e\x7e\x6a\x3a\xbb\xd6\xb3\xa2\xe8\x4a\xbc\x30\x1b\xf8\xf5\xd0\xe6\x67\x27\xc8\xdf\x8c\x27\xee\xdf\x52\x6f\x3c\xc1\x0e\xa9\x2f\x20\x5a\xea\xcd\xd0\x19\xf3\x68\xb8\xbf\xaf\x6a\x76\x79\x40\x1a\x86\xfd\xec\xf2\xf2\xf2\x47\x5c\xba\x2d\xd1\x10\x69\xe5\xc1\x1f\xab\x71\x56\x72\xff\x79\x04\x79\x75\x75\xf5\x8d\xc6\x91\x65\x85\x68\x5c\x06\xaf\x8f\x85\x1c\xf4\xb8\x32\x1b\x98\x5d\x1c\xec\xa7\x64\x67\x47\xb2\x8d\x75\x1e\xda\x68\x71\xa2\x51\x27\x46\xc5\x0a\xbd\xce\x60\xe6\x61\x86\xbf\xd4\x6c\xe0\x8c\x73\x7e\x5a\x17\x59\xa6\x5c\xa9\x6d\x9d\x41\x63\x0c\x5a\xce\x1c\x3e\x3f\x9b\xbb\x51\x90\x27\xc3\x5e\xcd\x93\x7e\xd7\xe7\x7e\x59\xfa\x7d\xdb\x2f\x9a\xc5\x28\x08\xf2\x6a\xb6\xb8\x11\xfc\x1e\x5a\xdd\x58\x68\x1c\x5a\xc5\x6a\xcc\x93\x6a\xd6\x79\xfb\x9b\x42\xad\xc1\x79\xe8\x49\x84\x60\x24\xe3\x58\x69\x59\xa0\x9d\x87\x95\xb8\x17\x6a\x55\x32\xd5\x6d\xf1\xe4\x00\x9b\x9b\xc5\x5d\x85\x07\x38\x58\x0b\x29\x61\x89\xc0\xc0\x30\x4b\xa0\xcb\xfe\x38\x63\x75\x29\x24\xc2\xe7\x4f\x1f\xa6\xf9\xd2\x27\x6e\xb7\xf1\xef\xcc\xe1\xe7\x4f\x1f\x76\xbb\x24\xc7\x7a\x71\x64\x84\xf5\x22\x4f\x4c\x0f\x3e\xde\x6e\xe3\xeb\x9a\x09\xb9\xdb\x4d\x21\x67\xc3\xcb\x25\x5c\xdc\x8a\x95\x02\xdd\x50\x9e\xb0\xc5\x64\x88\x76\xdc\x0a\x43\xbe\x1a\x89\x04\x7d\x41\x73\x28\x34\x6f\x6a\x54\x14\xff\xd3\xa0\x6d\x6f\x51\x22\x27\x6d\xc7\x61\xe7\x0f\xfd\xa5\x18\xc2\x6f\xac\x5e\x59\x74\x0e\xe6\x50\x32\xe9\x15\x1f\x05\xfd\x02\x89\x59\x51\x5c\x3f\xa0\xa2\x0f\xc2\x11\x2a\xb4\xe3\xf0\x1e\xdb\x42\xaf\x55\x38\x05\x84\xf9\xa2\x9b\xe5\x40\x94\x30\x3e\xc2\x4c\x7a\x63\x60\x91\x1a\xeb\xdf\x30\x81\xef\x54\x1f\x85\xf1\x3d\xb6\xef\x74\x81\x30\x9f\xc3\xec\x35\x7c\xfd\x0a\x9d\xc9\xff\x1b\x5e\xfb\xa9\x09\xf7\xe9\xdf\xf0\x22\xdb\x60\x87\xd4\x51\x2e\x18\x31\x98\x83\xc2\x35\xfc\xa1\x6d\xfd\x9e\x11\x1b\x4f\x3a\xd6\x41\x50\x22\xf1\x6a\x1c\x26\xcc\x88\x84\x71\xae\x1b\x45\xe1\x74\x80\x0c\x6a\xa4\x4a\x17\x19\x84\x37\x1f\x6f\xef\xc2\x69\x6f\xec\x5b\xea\xb2\x7d\x10\xc0\xf9\x6f\x9c\xa3\xa1\xf3\x0c\xce\x99\x31\x52\x70\xe6\xdf\x07\xc9\x17\xa7\xd5\xb4\x1b\xd4\xc4\x48\x26\xd4\x14\x5e\x25\xaf\xce\xa7\x87\xac\x77\xfd\xc6\x8f\xee\x5a\x83\x4f\xe5\x9e\xf7\x91\xbb\x21\xc3\x4f\x6a\x06\x7f\xde\x7e\xfc\x2b\x76\x64\x85\x5a\x89\xb2\x1d\x6f\x3f\x0f\xd3\x90\xf5\x7d\x8c\x1f\x98\x6c\x70\x37\xe9\x73\x76\x93\xee\x2b\xa6\x0a\xd5\x78\x6c\xd1\x4d\x0e\x3d\xd8\xeb\x0d\x16\x5d\xec\x4f\x1b\x4f\xde\xbe\x9c\xc3\xb5\x72\x5a\x62\x2c\xf5\xaa\x73\xf5\x29\xc1\x53\x33\x71\x8a\xc5\x99\x17\x79\x8c\xcf\x41\xe1\xcb\x40\x43\xbb\x30\x36\x16\xfd\x84\xbd\xc7\x92\x35\x92\x06\xd6\x7e\x60\x7c\x8c\xbf\xe0\xc3\x70\xe7\x49\x7f\xb5\xf3\xa4\xff\x71\xf7\x5f\x00\x00\x00\xff\xff\x03\x4f\xd0\xf2\xf4\x09\x00\x00")

func appengineTemplateIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateIndexHtml,
		"appengine/template/index.html",
	)
}

func appengineTemplateIndexHtml() (*asset, error) {
	bytes, err := appengineTemplateIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/index.html", size: 2548, mode: os.FileMode(420), modTime: time.Unix(1535507123, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appengineTemplateUHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func appengineTemplateUHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateUHtml,
		"appengine/template/u.html",
	)
}

func appengineTemplateUHtml() (*asset, error) {
	bytes, err := appengineTemplateUHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/u.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1535507011, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"appengine/template/index.html": appengineTemplateIndexHtml,
	"appengine/template/u.html": appengineTemplateUHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"appengine": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{appengineTemplateIndexHtml, map[string]*bintree{}},
			"u.html": &bintree{appengineTemplateUHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

