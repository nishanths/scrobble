// Code generated by go-bindata.
// sources:
// appengine/template/index.html
// appengine/template/u.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appengineTemplateIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x3f\x4f\xc4\x30\x0c\xc5\xe7\xe6\x53\x98\xec\x77\x59\x91\x70\x32\xf0\x6f\x85\xa1\x0c\x8c\xb9\xc4\x52\x8d\xda\x26\x4a\xac\x1e\xa8\xea\x77\x47\x25\x54\x30\xd9\xcf\x7e\xfe\xe9\xc9\x78\xf3\xf8\xf2\xd0\xbf\xbf\x3e\xc1\x20\xd3\xe8\x14\x1e\x85\x7c\x74\x0a\x00\x00\x27\x12\x0f\x61\xf0\xa5\x92\x58\xfd\xd6\x3f\x9f\x6e\x35\x98\xff\xcb\xd9\x4f\x64\xf5\xc2\x74\xcd\xa9\x88\x86\x90\x66\xa1\x59\xac\xbe\x72\x94\xc1\x46\x5a\x38\xd0\xe9\x47\x68\xa7\x3a\x14\x96\x91\xdc\xba\x9e\xfb\xbd\xd9\x36\x34\x6d\xa2\x3a\xac\xa1\x70\x16\xa7\xba\x6e\x24\x81\x4b\x4a\x52\xa5\xf8\x0c\x16\xd6\xf5\x7c\x7f\xc8\x6d\xbb\x53\x1d\x9a\xc3\x8c\xa6\xc5\xc5\x4b\x8a\x5f\x3b\x25\xf2\x02\x1c\xad\xf6\x39\x6b\x87\x26\xf2\xf2\x1b\xb7\x5d\x40\x2d\xc1\x6a\x13\xb9\x8a\xe1\x39\xd2\xe7\xf9\xa3\xee\xbe\x3f\x5e\x03\xa1\x69\xdf\xf8\x0e\x00\x00\xff\xff\xd1\x8a\xa7\x7a\x25\x01\x00\x00")

func appengineTemplateIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateIndexHtml,
		"appengine/template/index.html",
	)
}

func appengineTemplateIndexHtml() (*asset, error) {
	bytes, err := appengineTemplateIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/index.html", size: 293, mode: os.FileMode(420), modTime: time.Unix(1535667565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appengineTemplateUHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x3f\x4f\xc4\x30\x0c\xc5\xe7\xe6\x53\x18\xef\xd7\xac\x48\x24\x59\xf8\xb3\xc2\x50\x06\xc6\x90\xf8\x68\x20\xfd\xa3\xd8\xd7\xa3\xaa\xfa\xdd\x51\xaf\x9c\x60\x49\x6c\x3f\xbf\x9f\xf4\x6c\x6e\x1e\x9e\xef\x9b\xb7\x97\x47\x68\xa5\xcb\x4e\x99\xeb\x47\x3e\x3a\x05\x00\x60\x3a\x12\x0f\xa1\xf5\x85\x49\x2c\xbe\x36\x4f\x87\x5b\x04\xfd\x5f\xec\x7d\x47\x16\xa7\x44\xe7\x71\x28\x82\x10\x86\x5e\xa8\x17\x8b\xe7\x14\xa5\xb5\x91\xa6\x14\xe8\x70\x69\xd0\xa9\xca\x48\x92\x4c\x6e\x59\xea\x66\x2b\xd6\xd5\xe8\x7d\xa2\x2a\x93\x53\xff\x05\x85\xb2\x45\x96\x39\x13\xb7\x44\x82\x20\xf3\x48\x16\x85\xbe\x45\x07\x66\x84\xb6\xd0\xd1\xa2\x66\xf1\x92\x82\x3e\x0e\xbd\x5c\x9e\x7a\x13\x37\x0a\x87\x92\x46\x71\xaa\xaa\x32\x09\x9c\x7c\xf9\x60\xb0\xb0\x2c\xf5\xba\xde\xa9\xca\xe8\xab\x6e\xf4\x9e\xd3\xbc\x0f\x71\xde\x8c\x31\x4d\x90\xa2\x45\x3f\x8e\xe8\x8c\x8e\x69\xfa\xcd\xb9\x3b\x80\x4b\xb0\xa8\x63\x62\xd1\xa7\xfa\x93\xb7\x9d\x3f\xd6\x0e\x31\x7a\x3f\xe1\x4f\x00\x00\x00\xff\xff\xe6\xef\x93\x22\x5a\x01\x00\x00")

func appengineTemplateUHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateUHtml,
		"appengine/template/u.html",
	)
}

func appengineTemplateUHtml() (*asset, error) {
	bytes, err := appengineTemplateUHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/u.html", size: 346, mode: os.FileMode(420), modTime: time.Unix(1535667559, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"appengine/template/index.html": appengineTemplateIndexHtml,
	"appengine/template/u.html": appengineTemplateUHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"appengine": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{appengineTemplateIndexHtml, map[string]*bintree{}},
			"u.html": &bintree{appengineTemplateUHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

