// Code generated by go-bindata.
// sources:
// appengine/template/fs-snippet.tmpl
// appengine/template/index.tmpl
// appengine/template/u.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appengineTemplateFsSnippetTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x4f\x6f\xdb\x38\x10\xc5\xef\xfa\x14\x8c\x0f\xa1\x88\x10\x74\x72\x5a\xc0\x84\xb0\xd8\xec\xae\x81\x5e\x82\x02\x6e\x7b\xa8\x21\x04\x34\x35\xa2\xd9\x48\xa4\x42\x8e\x14\x08\xb2\xbe\x7b\x61\xf9\x5f\xdd\xb4\xd5\x4d\x33\x6f\x1e\x7f\xf3\x24\x0e\x43\x01\xa5\x75\x40\x66\xcb\xd5\xca\xd9\xa6\x01\x9c\x8d\x63\xf2\x66\x5d\xe1\xdf\xd6\xf4\xb9\x8c\xcf\x01\x54\xd1\xd3\x9c\x64\xa4\x6c\x9d\x46\xeb\x5d\xca\xc8\x90\x10\x42\x88\x2d\x49\x7a\x92\x2e\x57\x34\x5f\x53\xdc\xb6\xf5\xa6\x04\x28\x36\x4a\xbf\xd0\xfc\x24\xdc\x3f\x7f\x14\x8a\xad\x2d\x20\x65\x93\x78\x4c\xc6\xe4\x8a\xa0\x80\x4d\x6b\x26\x02\x0c\x2d\xc8\xab\xde\xd6\x47\x9c\x5a\x34\xa2\x32\xd6\x19\x51\xb6\x55\x15\xd1\x87\x5e\x68\x5f\xd3\x6b\xb5\x0f\x07\x1f\xfa\xf0\xf5\xbf\xbf\x7e\xea\x39\x55\x43\x6c\x94\x86\x83\x62\xb9\xa2\x32\x49\xcf\x2b\xd7\xdc\x71\xe0\xc8\x2b\xee\xb9\xe1\x3d\xbb\x04\x00\xc4\x3a\x52\x33\x32\xd8\x32\xad\x85\xf6\x2e\xfa\x0a\xc8\xed\x2d\x39\xbf\x88\xca\x1b\x46\x86\xeb\x42\x4a\x97\x6d\x55\xad\xf6\xa0\xe4\x7c\x34\xd1\xde\x95\x95\xd5\x28\xc8\xc7\x0a\x54\x04\x12\x01\x4f\xc9\xcd\xae\x28\x67\xb9\xa0\x4c\x8e\x24\x00\xb6\xc1\xc9\x71\xe2\x31\x59\xbd\x86\x3c\x3b\x53\x2b\xbe\x61\x83\x11\xaf\x7f\x1b\xf1\x2a\x9a\x36\x6e\xd3\xb5\xe2\x9b\x9c\x2d\x8c\x78\x56\x8d\x9d\xfa\x72\x94\x46\xbc\x66\xeb\x5c\x4e\x16\x3e\x73\x42\x07\x50\x08\xff\x57\x50\x83\xc3\x14\x99\xf4\x42\xc5\xde\xe9\xec\x41\x7a\x11\x83\xce\xe8\x16\xb1\x89\x8b\xf9\x9c\xde\x9d\x3e\xc2\x1d\x9d\xc7\x79\x19\xc5\xb7\x48\x0f\x46\x7d\xe6\x84\x01\x3c\xba\xc4\xc7\xfe\x93\x32\x4f\xaa\x86\x14\xd9\xfa\x3e\x97\xbd\x68\x54\x00\x87\x4f\xbe\x00\x61\x5d\x84\x80\x8f\x50\xfa\x00\xa9\xe7\x3d\x3b\x58\x18\x61\x0b\x70\x68\xcb\xfe\xb2\x92\xe5\x1d\x1b\x4c\x5a\xf1\xa1\xb5\xc5\xc2\x8e\x4c\xda\x32\xed\xd8\xbe\xd2\xb1\xfd\x2a\x11\xf0\x73\x84\xf0\x45\x85\x78\x99\x3a\xce\x1c\x14\xd0\x81\xc3\x77\x8e\x74\x2a\x53\x3e\xb8\x85\xe5\xcd\xa2\x1b\xd9\x78\xa2\x88\xdb\x16\x0b\xff\xe6\x2e\x33\xfb\x81\x59\x00\x3d\xe3\x37\x0f\x93\x67\x80\x88\x2a\xe0\x2f\x15\xf7\x17\xa7\xfd\x0f\x70\x75\xb8\x9a\x74\xc7\xf2\x8c\xdf\xa8\x60\xda\x29\x2f\x51\x81\x33\xb8\xdd\xed\xd4\x65\xfa\x94\xc6\x3f\x5a\xfb\xf6\xdd\x0a\x3e\xa3\xea\xd0\xa0\xb2\xcb\xba\xdd\x6e\x18\x65\x27\x94\xd6\xf8\xa1\xc8\xac\x34\xa9\x9f\xf6\x3f\x91\x54\xa0\xc2\x3e\xa8\x7f\xbd\x7f\xb1\xf0\x23\xf8\x28\x93\x91\x1d\x2f\x36\x2f\xbc\x9e\x80\xf8\x6f\xee\x0a\xa7\x51\x07\xdb\x20\xe5\xb4\x8d\x10\x28\x93\xc9\x30\x80\x2b\xc6\x31\xf9\x1e\x00\x00\xff\xff\xb2\xf2\xa0\x21\x5d\x04\x00\x00")

func appengineTemplateFsSnippetTmplBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateFsSnippetTmpl,
		"appengine/template/fs-snippet.tmpl",
	)
}

func appengineTemplateFsSnippetTmpl() (*asset, error) {
	bytes, err := appengineTemplateFsSnippetTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/fs-snippet.tmpl", size: 1117, mode: os.FileMode(420), modTime: time.Unix(1536403583, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appengineTemplateIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x4d\x4f\x03\x21\x10\x86\xef\xfd\x15\xe3\xdc\x5b\xae\x26\xc2\x1e\xfc\xe8\x55\x93\xae\x07\x8f\x74\x99\x64\xc7\xec\x02\x81\xc9\x56\x43\xf8\xef\x66\xa5\x8d\x55\xb9\xc0\xcb\xcb\xf3\x10\xd0\x37\x8f\xcf\x0f\xfd\xdb\xcb\x13\x8c\x32\x4f\xdd\x46\x5f\x26\xb2\xae\xdb\x00\x00\xe8\x99\xc4\xc2\x30\xda\x94\x49\x0c\xbe\xf6\xfb\xed\x2d\x82\xba\x2e\xbd\x9d\xc9\xe0\xc2\x74\x8a\x21\x09\xc2\x10\xbc\x90\x17\x83\x27\x76\x32\x1a\x47\x0b\x0f\xb4\xfd\x0e\x78\xe6\x84\x65\xa2\xae\x94\x5d\xbf\x2e\x6a\xd5\xaa\xed\xb4\x36\x0f\x89\xa3\xb4\xb0\x8e\x89\x04\x8e\x21\x48\x96\x64\x23\x18\x28\x65\x77\x7f\x89\xb5\xde\x35\x48\x5d\x53\xff\x14\xa5\x08\xcd\x71\xb2\x42\x80\xfb\xc3\xc1\x73\x8c\x24\x58\xeb\x1f\x56\xab\xf6\x72\x7d\x0c\xee\xf3\xac\x72\xbc\x00\x3b\x83\x36\x46\xec\xb4\x72\xbc\xfc\xba\x03\x72\x1a\x0c\x2a\xc7\x59\x14\x7b\x47\x1f\xbb\xf7\xbc\x9e\xfb\x51\x36\x97\x56\xed\x6f\xbf\x02\x00\x00\xff\xff\x32\x79\x58\x32\x73\x01\x00\x00")

func appengineTemplateIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateIndexTmpl,
		"appengine/template/index.tmpl",
	)
}

func appengineTemplateIndexTmpl() (*asset, error) {
	bytes, err := appengineTemplateIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/index.tmpl", size: 371, mode: os.FileMode(420), modTime: time.Unix(1536404109, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appengineTemplateUTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x51\xbd\x4e\x23\x31\x10\xee\xf3\x14\x93\xa9\xee\x8a\xac\xdb\x93\xce\xde\x06\x48\x0b\x52\x42\x41\x69\xd6\x13\x76\x60\x7f\x2c\x7b\xb2\x21\xb2\xfc\xee\x68\xe3\x10\x02\x4c\x61\x7b\xfc\xfd\x59\x1e\xbd\xbc\xbd\xbf\xd9\x3e\x3d\xdc\x41\x2b\x7d\x57\x2f\xf4\xe7\x46\xd6\xd5\x0b\x00\x00\xdd\x93\x58\x68\x5a\x1b\x22\x89\xc1\xc7\xed\x7a\xf5\x0f\x41\x5d\x83\x83\xed\xc9\xe0\xc4\x74\xf0\x63\x10\x84\x66\x1c\x84\x06\x31\x78\x60\x27\xad\x71\x34\x71\x43\xab\x53\x83\x67\x9d\xb0\x74\x54\xa7\x54\x6d\xe7\x43\xce\x5a\x95\x9b\x82\x76\x3c\xbc\x41\xa0\xce\x60\x94\x63\x47\xb1\x25\x12\x04\x39\x7a\x32\x28\xf4\x2e\xaa\x89\x11\xa1\x0d\xb4\x33\xa8\xa2\x58\xe1\x46\xed\xc6\x41\x4e\x4b\x35\x83\x67\xa3\xd8\x04\xf6\x52\x9a\xb9\x3a\x12\xd8\xdb\xf0\x12\xc1\x40\x4a\x55\xce\xff\x0b\x4f\x5d\x13\x7f\xa9\x78\x07\x7f\x96\x27\x59\xe5\x03\x4f\x56\xe8\x2f\xa4\x0b\x3a\x57\x4a\x42\xbd\xef\xac\x10\xe0\x7a\xb3\x19\xd8\x7b\x12\xcc\xf9\x42\xca\x3f\x72\xb4\x2a\x3f\xac\x9f\x47\x77\x3c\xc7\x3a\x9e\x80\x9d\x41\xeb\x3d\xd6\x5a\x39\x9e\xbe\xbd\x07\x62\x68\x0c\x2a\xc7\x51\xd4\xbe\x7a\x8d\x33\xe7\xcb\xae\xf8\x68\x55\xe6\xf7\x11\x00\x00\xff\xff\x48\x02\x36\x6b\xd7\x01\x00\x00")

func appengineTemplateUTmplBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateUTmpl,
		"appengine/template/u.tmpl",
	)
}

func appengineTemplateUTmpl() (*asset, error) {
	bytes, err := appengineTemplateUTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/u.tmpl", size: 471, mode: os.FileMode(420), modTime: time.Unix(1536404112, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"appengine/template/fs-snippet.tmpl": appengineTemplateFsSnippetTmpl,
	"appengine/template/index.tmpl": appengineTemplateIndexTmpl,
	"appengine/template/u.tmpl": appengineTemplateUTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"appengine": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"fs-snippet.tmpl": &bintree{appengineTemplateFsSnippetTmpl, map[string]*bintree{}},
			"index.tmpl": &bintree{appengineTemplateIndexTmpl, map[string]*bintree{}},
			"u.tmpl": &bintree{appengineTemplateUTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

