// Code generated by go-bindata.
// sources:
// appengine/template/index.html
// appengine/template/u.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appengineTemplateIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xbd\x6e\xc4\x20\x0c\x80\x67\x78\x0a\x97\xbd\xf1\x5a\xa9\x86\xa1\x7f\x6b\x3b\xa4\xc3\x8d\x24\x20\x85\x53\x72\x41\x60\x45\x77\x42\xbc\xfb\x29\xe2\xa2\x9b\xfc\xa3\xcf\x9f\x6d\x7a\xf9\xfa\xfd\xec\x4f\x7f\xdf\x30\xf1\x32\x1b\x49\x47\xf0\xd6\x19\x09\x00\x40\x8b\x67\x0b\xe3\x64\x53\xf6\xac\xd5\x7f\xff\xf3\xfa\xa6\x00\x8d\x14\xc4\x81\x67\x6f\x4a\xe9\xfa\x3d\xa9\x95\xb0\x75\xa4\xa0\x3c\xa6\x10\xd9\x48\x21\x66\xcf\x30\xac\x2b\x67\x4e\x36\x82\x86\x52\xba\x8f\xa3\xac\xf5\x5d\x0a\xc2\x03\x26\x6c\x6b\x69\x58\xdd\x6d\xb7\xb8\xb0\x41\x70\x5a\xd9\x18\x95\x21\x74\x61\x7b\xdc\xd4\x26\x20\xa7\x51\x2b\x74\x21\x33\x86\x8b\xf3\xd7\xee\x9c\x77\xee\xe9\x6b\x22\xc2\xf6\xd5\x3d\x00\x00\xff\xff\x31\x0e\x57\x2b\xed\x00\x00\x00")

func appengineTemplateIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateIndexHtml,
		"appengine/template/index.html",
	)
}

func appengineTemplateIndexHtml() (*asset, error) {
	bytes, err := appengineTemplateIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/index.html", size: 237, mode: os.FileMode(420), modTime: time.Unix(1535578104, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appengineTemplateUHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x90\xbf\x4e\xc3\x40\x0c\xc6\xe7\xdc\x53\x18\xef\xc4\x2b\x12\xbe\x5b\xf8\xb3\xc2\x10\x06\xc6\x23\xe7\x92\x83\x6b\x1b\x9d\xdd\x8a\x28\xca\xbb\xa3\x10\xaa\x2e\xb6\xe5\xcf\xdf\x4f\xb6\xf9\xe6\xf1\xe5\xa1\x7b\x7f\x7d\x82\xc1\xf6\x25\x38\xbe\x24\x89\x29\x38\x00\x00\xde\x8b\x45\xe8\x87\x58\x55\xcc\xe3\x5b\xf7\x7c\x7b\x87\x40\xc1\x35\x6c\xd9\x8a\x84\x79\x6e\xbb\xb5\x58\x16\xa6\xad\xe3\x1a\x2e\xf9\xf0\x0d\x55\x8a\x47\xb5\xa9\x88\x0e\x22\x86\x60\xd3\x28\x1e\x4d\x7e\x8c\x7a\x55\x84\xa1\xca\xce\x23\xa9\x45\xcb\x3d\xed\x8e\x07\xfb\x0b\xed\x2a\xae\x14\xed\x6b\x1e\x2d\xb8\xa6\x29\x62\x70\x8a\xf5\x53\xc1\xc3\x3c\xb7\xcb\x72\xef\x1a\xa6\x8b\xce\xb4\xed\xcb\x1f\xc7\x34\xad\xc6\x94\xcf\x90\x93\xc7\x38\x8e\x18\x98\x52\x3e\xff\x1f\xb3\x39\x40\x6b\xef\x91\x52\x56\xa3\x53\xfb\xa5\xeb\xcc\x95\xb5\x41\x98\xb6\x57\xfc\x06\x00\x00\xff\xff\x47\x34\xab\x6c\x22\x01\x00\x00")

func appengineTemplateUHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateUHtml,
		"appengine/template/u.html",
	)
}

func appengineTemplateUHtml() (*asset, error) {
	bytes, err := appengineTemplateUHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/u.html", size: 290, mode: os.FileMode(420), modTime: time.Unix(1535580812, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"appengine/template/index.html": appengineTemplateIndexHtml,
	"appengine/template/u.html": appengineTemplateUHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"appengine": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{appengineTemplateIndexHtml, map[string]*bintree{}},
			"u.html": &bintree{appengineTemplateUHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

