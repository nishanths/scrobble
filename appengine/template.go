// Code generated by go-bindata.
// sources:
// appengine/template/index.html
// appengine/template/u.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appengineTemplateIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xdf\x6f\xdb\x36\x10\x7e\xb6\xff\x8a\x9b\x83\x15\x2d\x10\xfd\x4a\x6d\x37\x60\x54\x03\xc3\x3a\x0c\x7b\xea\x80\xf6\x65\x8f\x14\x75\x92\xb8\x50\x24\x41\x9e\x62\x7b\x43\xff\xf7\x42\x12\x65\x2b\x4e\xd2\x06\x82\x61\xfb\xc8\xfb\xf8\x7d\xdf\x9d\x8e\xf9\x2f\x9f\x3e\xff\xfe\xf5\x9f\xbf\xff\x80\x86\x5a\xb5\x5b\xe6\xd3\x17\xf2\x72\xb7\x5c\xe4\x24\x49\xe1\xee\x8b\x70\xa6\x28\x14\xe6\xc9\xf8\x7f\xb9\xc8\x95\xd4\xf7\xe0\x50\x7d\x5c\x79\x3a\x2a\xf4\x0d\x22\xad\xa0\x71\x58\x7d\x5c\x25\x9e\x38\x49\x91\x08\xef\x93\xca\x68\x8a\x85\xf7\xab\x9f\x26\x95\xd2\xd3\x90\xd2\x72\xa9\x4f\x29\xc3\xc6\xdd\x72\xd1\xf3\x82\xff\x97\x8b\x45\xcb\x0f\x51\x83\xb2\x6e\x88\x41\x96\xa6\xbf\xde\x2d\x17\x00\x00\x17\xa1\x6f\xcb\xe5\xa2\x30\xe5\x31\xa4\xb8\x5a\x6a\x06\x29\xf0\x8e\x4c\x48\xd8\xcb\x92\x1a\x06\x1f\xd2\xd4\x1e\x42\xa8\x94\xde\x2a\x7e\x64\x50\x29\x9c\x62\xfd\xcf\xa8\x94\x0e\x05\x49\xa3\x19\x08\xa3\xba\x56\x87\xc5\x7f\x3b\x4f\xb2\x3a\x46\xc2\x68\x42\x4d\x0c\x04\x6a\x42\x17\x56\x5f\xc7\x74\x38\xc4\x68\x8a\x2a\xde\x4a\x75\x64\xb0\xb2\xce\x1c\x64\xcb\x41\x9b\x07\xbe\x0a\x5a\xfa\x7a\xa0\x1b\xd4\x58\xe3\xe5\xc8\xc5\xa1\xe2\x24\x1f\x70\xda\x93\x0d\xeb\x03\x98\x97\xff\x21\x83\x9b\x78\x83\x6d\x38\x43\x18\x65\x1c\x03\xb8\xca\xb2\x2c\x84\x14\x12\xa1\x8b\xbc\xe5\x42\xea\x9a\x41\x94\xc6\xe9\x39\x81\xf0\x40\x11\x57\xb2\xd6\x17\xba\x86\x03\xf6\x41\xc5\x3a\x4d\x43\xf8\xcc\x8b\x17\xde\xa8\x8e\x70\x02\x32\x96\x41\x94\xfd\xc4\xe8\x1f\x7b\x39\xf0\x88\x24\x61\xeb\x9f\xb8\xdc\x17\x37\x52\x58\x11\x9b\xd7\x37\xc4\xdd\x48\x73\xb6\x30\xee\x9c\x58\x87\xf5\x34\x78\x28\xb5\xed\x68\xb0\xd1\x74\xa4\xa4\x46\x06\xa0\x8d\xc6\xb9\xf4\xd1\xdb\xf7\xdb\xc7\xe5\x9b\x0c\xf9\x70\x32\xe4\x89\xbd\x71\xba\x3e\xb9\x1b\xed\xb1\xb8\x97\x14\x35\x47\xdb\xa0\xf6\x6c\x7e\x4a\xd4\xfa\x67\xe3\xcf\xc5\x7a\x8e\xe7\x2e\x8b\xa7\xd2\x16\xc6\x95\xe8\xd8\x0b\xdc\xd7\xb3\xbe\x28\xb8\xb8\xaf\x9d\xe9\x74\xc9\xc0\xd5\xc5\xdb\xf4\x7a\x78\xe2\x74\xf3\xee\x55\xdd\x39\x94\x9e\x97\xe5\x20\x71\x6d\x0f\x70\x7b\x2a\xf3\x8b\x1d\xd4\xbf\x19\xcf\xbc\x7f\x85\x39\xf4\x04\x07\xa4\x51\x40\x54\x98\x43\xa8\x8c\xbd\x68\xee\xa7\xaa\xb2\xcd\x09\x29\x34\xfb\xd5\x66\xb3\xf9\x11\x97\x61\x4a\x74\x44\x46\xf7\xe0\x97\x6e\x5c\x55\xa2\x7f\x2e\x20\xb7\xdb\xed\x23\x8f\x23\xc7\x4b\xd9\x79\x06\xef\xcf\x42\x4e\x7e\x6c\xed\x01\xb2\xf5\x29\x3e\x27\x9b\x9d\xc9\x76\xce\xf7\xd0\xd6\xc8\x99\x47\x83\x19\x0d\x2f\xcd\x9e\x41\xd6\xc3\x84\x4f\x6a\x0f\x70\x25\x84\x98\xeb\x22\xc7\xb5\xaf\x8c\x6b\x19\x74\xd6\xa2\x13\xdc\xe3\xcb\xbd\xf9\x6d\xb9\xc8\x93\x30\x57\xf3\x64\x9c\xf4\x79\x3f\x2c\xfb\x79\x6b\x77\x5f\x0d\xd4\x48\xe0\x89\x3b\xc2\xf2\x1a\x72\x1e\x26\xf4\x6a\xe7\x65\xad\x41\x6a\xd8\x4b\x6a\xe0\x4f\x63\xea\xfe\x4a\xe0\xbb\x38\x4f\xec\x98\xfb\x57\x05\x47\xd3\xc1\xbd\x36\x7b\xa0\x06\xa1\xf3\xe8\x34\x6f\x11\x4c\x05\x1c\xac\x33\x95\x54\x78\x0d\x0f\xd2\x4b\x82\x9c\xef\x7c\xb8\x58\x62\xae\x14\x2a\x8c\x85\x48\xba\xe4\x8d\xa2\xbb\x29\xf1\x4d\x4d\x77\x8f\x8f\x98\xd1\xf9\x64\xf6\x5a\x19\x5e\xf6\x1b\x60\x82\x02\x6e\x2d\x54\xc6\x41\xcb\xc5\xe7\x2f\xf0\xf6\x21\x8b\xd3\x6b\xe8\x6c\xc9\x09\x4b\xf8\xad\xab\xe1\xe6\x16\x6e\xd2\xec\xf6\xdd\x00\x99\x27\xa3\xf2\x3c\x19\x6f\xbe\xef\x01\x00\x00\xff\xff\x6b\x6c\xc1\x3d\x11\x07\x00\x00")

func appengineTemplateIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateIndexHtml,
		"appengine/template/index.html",
	)
}

func appengineTemplateIndexHtml() (*asset, error) {
	bytes, err := appengineTemplateIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/index.html", size: 1809, mode: os.FileMode(420), modTime: time.Unix(1535509142, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appengineTemplateUHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func appengineTemplateUHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateUHtml,
		"appengine/template/u.html",
	)
}

func appengineTemplateUHtml() (*asset, error) {
	bytes, err := appengineTemplateUHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/u.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1535507011, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"appengine/template/index.html": appengineTemplateIndexHtml,
	"appengine/template/u.html": appengineTemplateUHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"appengine": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{appengineTemplateIndexHtml, map[string]*bintree{}},
			"u.html": &bintree{appengineTemplateUHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

