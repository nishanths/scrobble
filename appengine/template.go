// Code generated by go-bindata.
// sources:
// appengine/template/index.html
// appengine/template/u.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appengineTemplateIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x50\x3d\x4f\xc4\x30\x0c\xdd\xef\x57\x18\xef\xd7\xac\x48\x24\x1d\xf8\x5a\x61\x28\x03\x63\x2e\xb6\x54\xa3\xb6\x89\x12\xab\x07\xaa\xfa\xdf\x51\x49\x2b\xc0\x8b\xfd\xfc\xfc\x9e\x2d\xdb\x9b\xc7\x97\x87\xee\xfd\xf5\x09\x7a\x1d\x87\xf6\x64\x8f\xc4\x9e\xda\x13\x00\x80\x1d\x59\x3d\x84\xde\xe7\xc2\xea\xf0\xad\x7b\x3e\xdf\x22\x98\xbf\xe4\xe4\x47\x76\x38\x0b\x5f\x53\xcc\x8a\x10\xe2\xa4\x3c\xa9\xc3\xab\x90\xf6\x8e\x78\x96\xc0\xe7\x1f\x80\xbb\x4e\x45\x07\x6e\x97\xa5\xe9\xb6\x62\x5d\xad\xa9\x9d\xca\x96\x90\x25\x69\x05\x5b\x0c\xac\x70\x89\x51\x8b\x66\x9f\xc0\xc1\xb2\x34\xf7\x07\x5c\xd7\xbb\x2a\x32\x87\xca\x9a\x7a\xbd\xbd\x44\xfa\xda\x1d\x49\x66\x10\x72\xe8\x53\xc2\xd6\x1a\x92\xf9\xdf\x2a\x28\x39\x38\x34\x24\x45\x8d\x4c\xc4\x9f\xcd\x47\xd9\xe6\x7e\x2d\xab\x97\x35\xf5\x3f\xdf\x01\x00\x00\xff\xff\x37\x0d\x40\xdb\x37\x01\x00\x00")

func appengineTemplateIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateIndexHtml,
		"appengine/template/index.html",
	)
}

func appengineTemplateIndexHtml() (*asset, error) {
	bytes, err := appengineTemplateIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/index.html", size: 311, mode: os.FileMode(420), modTime: time.Unix(1535676087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appengineTemplateUHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x3f\x4f\xc4\x30\x0c\xc5\xf7\xfb\x14\xc6\xfb\x35\x2b\x12\x49\x17\xfe\xac\x30\x1c\x03\x63\x48\x7c\xd4\x90\xfe\x51\xec\xeb\x51\x55\xfd\xee\xa8\x97\x9e\x80\x0c\x49\x9e\xdf\xf3\x4f\xb2\xed\xcd\xc3\xf3\xfd\xe1\xed\xe5\x11\x1a\x6d\x53\xbd\xb3\xd7\x87\x7c\xac\x77\x00\x00\xb6\x25\xf5\x10\x1a\x9f\x85\xd4\xe1\xeb\xe1\x69\x7f\x8b\x60\xfe\x9a\x9d\x6f\xc9\xe1\xc8\x74\x1e\xfa\xac\x08\xa1\xef\x94\x3a\x75\x78\xe6\xa8\x8d\x8b\x34\x72\xa0\xfd\x45\xe0\xd6\xa7\xac\x89\xea\x79\xae\x0e\xeb\x67\x59\xac\x29\x95\xe2\x26\xee\xbe\x20\x53\x72\x28\x3a\x25\x92\x86\x48\x11\x74\x1a\xc8\xa1\xd2\xb7\x9a\x20\x82\xd0\x64\x3a\x3a\x34\xa2\x5e\x39\x98\x63\xdf\xe9\xe5\xaa\x56\x73\x03\x49\xc8\x3c\x68\x11\xeb\x49\xa4\x70\xf2\xf9\x43\xc0\xc1\x3c\x57\xcb\x72\x57\x72\xe6\x1a\xb4\xa6\x4c\x6e\xdf\xfb\x38\x6d\x90\xc8\x23\x70\x74\xe8\x87\x01\x6b\x6b\x22\x8f\xff\xe8\x20\x39\x38\x34\x91\x45\xcd\xa9\xfa\x94\x35\xf3\x8b\x2b\x1c\x6b\xca\x5e\x7f\x02\x00\x00\xff\xff\x5a\x0b\xad\xba\x6f\x01\x00\x00")

func appengineTemplateUHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateUHtml,
		"appengine/template/u.html",
	)
}

func appengineTemplateUHtml() (*asset, error) {
	bytes, err := appengineTemplateUHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/u.html", size: 367, mode: os.FileMode(420), modTime: time.Unix(1535676094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"appengine/template/index.html": appengineTemplateIndexHtml,
	"appengine/template/u.html": appengineTemplateUHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"appengine": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{appengineTemplateIndexHtml, map[string]*bintree{}},
			"u.html": &bintree{appengineTemplateUHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

