// Code generated by go-bindata. DO NOT EDIT.
// sources:
// appengine/template/root.html (476B)
// appengine/template/u.html (464B)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appengineTemplateRootHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x3f\x6f\xf3\x20\x10\xc6\xf7\x7c\x8a\x7b\xd9\x63\xd6\x57\x2a\x78\xe8\xbf\xb5\x1d\xd2\xa1\x23\x81\x8b\x7c\x29\x06\x8b\x3b\x39\x8a\x2c\x7f\xf7\x2a\x21\x56\x9d\x6e\x65\x00\x1e\x8e\x1f\xcf\x23\xce\xfc\x7b\x7e\x7b\xda\x7d\xbe\xbf\x40\x27\x7d\x6c\x37\x66\x59\xd0\x85\x76\x03\x00\x60\x7a\x14\x07\xbe\x73\x85\x51\xac\xfa\xd8\xbd\x6e\xff\x2b\xd0\xeb\x62\x72\x3d\x5a\x35\x12\x9e\x86\x5c\x44\x81\xcf\x49\x30\x89\x55\x27\x0a\xd2\xd9\x80\x23\x79\xdc\x5e\x85\xba\x71\x42\x12\xb1\x9d\xa6\x66\x77\xd9\xcc\xb3\xd1\xf5\xa4\x56\x23\xa5\x2f\x28\x18\xad\x62\x39\x47\xe4\x0e\x51\x14\x74\x05\x0f\x56\x69\x16\x27\xe4\xf5\x21\x27\xb9\x4e\x8d\x67\x56\x7f\x00\x3d\xb3\x4e\x59\x08\xd7\x20\xfb\x42\x83\x54\x71\x19\x11\x05\xf6\x39\x0b\x4b\x71\x03\x58\x98\xa6\xe6\x71\x91\xf3\xfc\x50\x21\xbd\x50\x46\xd7\xff\x32\xfb\x1c\xce\xb7\x17\x03\x8d\x40\xc1\x2a\x37\x0c\xaa\x35\x3a\xd0\x78\x67\x05\x5c\xfc\x4f\xa6\xe3\x12\xa9\xa7\xd4\x1c\xf9\x02\xac\x13\xdd\x33\x81\x58\x74\xc9\x59\x7e\xdd\x34\xba\xda\x1b\x5d\x9b\xf8\x1d\x00\x00\xff\xff\x45\x33\x43\x08\xdc\x01\x00\x00")

func appengineTemplateRootHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateRootHtml,
		"appengine/template/root.html",
	)
}

func appengineTemplateRootHtml() (*asset, error) {
	bytes, err := appengineTemplateRootHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/root.html", size: 476, mode: os.FileMode(0664), modTime: time.Unix(1588571036, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x86, 0x19, 0xfc, 0xb6, 0x32, 0x64, 0xe2, 0x55, 0xa1, 0x50, 0xfb, 0xb6, 0x2c, 0x41, 0x74, 0x23, 0x44, 0x2d, 0x6f, 0x72, 0x75, 0x84, 0xd1, 0x33, 0x1e, 0xa3, 0x6c, 0x62, 0xd6, 0x8b, 0xb1, 0x72}}
	return a, nil
}

var _appengineTemplateUHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x3d\x6f\xf3\x20\x10\xde\xf3\x2b\xee\x65\x4f\x58\x5f\xa9\xe0\xa5\x1f\x6b\x3b\xa4\x43\x47\x0a\x97\xf8\x52\x8c\x2d\xee\xe2\x28\xb2\xfc\xdf\x2b\x07\x47\xb5\x3b\x95\x01\x38\xee\xf9\x12\x67\xfe\x3d\xbd\x3e\xee\x3f\xde\x9e\xa1\x96\x26\x56\x1b\x73\x3f\xd0\x85\x6a\x03\x00\x60\x1a\x14\x07\xbe\x76\x99\x51\xac\x7a\xdf\xbf\x6c\xff\x2b\xd0\xcb\x66\x72\x0d\x5a\xd5\x13\x5e\xba\x36\x8b\x02\xdf\x26\xc1\x24\x56\x5d\x28\x48\x6d\x03\xf6\xe4\x71\x7b\x2b\xd4\xcc\x13\x92\x88\xd5\x30\xec\xf6\xd3\x65\x1c\x8d\x2e\x2f\xa5\x1b\x29\x7d\x41\xc6\x68\x15\xcb\x35\x22\xd7\x88\xa2\xa0\xce\x78\xb0\x4a\xb3\x38\x21\xaf\x0f\x6d\x92\xdb\xb6\xf3\xcc\x77\x59\xf6\x99\x3a\x29\xc5\xb4\x22\x0a\x9c\x5d\x3e\x32\x58\x18\x86\xdd\x38\x3e\x14\x9c\x5e\x02\xff\x64\xe7\x99\x75\xea\x72\x7b\xcc\xc8\x3c\x5b\x1a\x5d\xbe\xc9\x7c\xb6\xe1\x3a\x6b\x05\xea\x81\x82\x55\xae\xeb\x54\x65\x74\xa0\x7e\x15\x0d\x38\xfb\x1f\xd1\xd3\x52\xf3\xc4\x13\x61\x15\x6c\xc5\x09\xc4\xa2\xcf\xbf\x60\x46\x17\x6f\xa3\xcb\xe0\xbe\x03\x00\x00\xff\xff\xde\x31\xc8\xd3\xd0\x01\x00\x00")

func appengineTemplateUHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateUHtml,
		"appengine/template/u.html",
	)
}

func appengineTemplateUHtml() (*asset, error) {
	bytes, err := appengineTemplateUHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/u.html", size: 464, mode: os.FileMode(0664), modTime: time.Unix(1588571089, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7c, 0xab, 0xa6, 0x2f, 0xdb, 0x48, 0x36, 0x84, 0xe4, 0xe2, 0x60, 0x71, 0x39, 0xe5, 0xa4, 0xa0, 0xc4, 0x81, 0x4a, 0x2b, 0xe2, 0x19, 0x85, 0x35, 0xd, 0xfa, 0xc5, 0xd9, 0x45, 0xd0, 0x9c, 0xe3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"appengine/template/root.html": appengineTemplateRootHtml,
	"appengine/template/u.html":    appengineTemplateUHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"appengine": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"root.html": &bintree{appengineTemplateRootHtml, map[string]*bintree{}},
			"u.html":    &bintree{appengineTemplateUHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
