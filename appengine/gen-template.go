// Code generated by go-bindata. DO NOT EDIT.
// sources:
// appengine/template/content.html (543B)
// appengine/template/root.html (478B)
// appengine/template/u.html (466B)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appengineTemplateContentHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x31\x4f\xc3\x30\x10\x85\xf7\xfe\x8a\xe3\xf6\xd6\xea\xc6\x60\x67\x29\x20\x36\x10\x0a\x03\xa3\xb1\xaf\xd8\xc2\xb1\xa3\xf8\x94\xaa\xaa\xf2\xdf\x51\xe2\x14\xa5\x05\x21\xb1\x24\x77\xf7\xde\x7d\xd2\x3b\x59\xde\xdc\x3d\xed\xea\xb7\xe7\x7b\x70\xdc\x84\x6a\x25\xcf\x3f\xd2\xb6\x5a\x01\x00\xc8\x86\x58\x83\x71\xba\xcb\xc4\x0a\x5f\xeb\x87\xf5\x2d\x82\x58\x8a\x51\x37\xa4\xb0\xf7\x74\x68\x53\xc7\x08\x26\x45\xa6\xc8\x0a\x0f\xde\xb2\x53\x96\x7a\x6f\x68\x3d\x35\x38\xef\xb1\xe7\x40\xd5\xe9\x04\x9b\x7a\xac\x60\x18\xa4\x28\xb3\xa2\x07\x1f\x3f\xa1\xa3\xa0\x30\xf3\x31\x50\x76\x44\x8c\xe0\x3a\xda\x2b\x14\x99\x35\x7b\x23\xf6\x29\xf2\xf4\xd9\x98\x9c\xf1\x1f\x8b\x26\x67\xd1\xa5\x74\xde\x93\xa2\xa4\x95\xef\xc9\x1e\x67\x8c\xf5\x3d\x78\xab\x50\xb7\xed\x4c\xfe\x1e\x9b\xa0\x73\x56\xf8\x92\x12\x2f\xa4\x1f\xfa\xc8\xf4\xf1\xe3\xda\x32\xba\xdc\x76\x4a\xfe\x58\x1c\x53\x76\xb7\xbd\xf4\x49\x61\x7d\xff\x07\x7d\x3e\xf1\x2f\xf4\x91\xbc\x2b\x2a\x0c\xc3\x15\xe1\x92\xba\x68\xe7\x52\x8a\x72\x03\x29\xca\x3b\xf8\x0a\x00\x00\xff\xff\x64\x3a\xd1\x4b\x1f\x02\x00\x00")

func appengineTemplateContentHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateContentHtml,
		"appengine/template/content.html",
	)
}

func appengineTemplateContentHtml() (*asset, error) {
	bytes, err := appengineTemplateContentHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/content.html", size: 543, mode: os.FileMode(0664), modTime: time.Unix(1588584305, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0x36, 0x53, 0x9c, 0xb7, 0xb8, 0x70, 0x33, 0xa3, 0x54, 0x4e, 0x71, 0x1c, 0xd8, 0xf9, 0x73, 0x49, 0xfd, 0x19, 0x1a, 0xcf, 0x4b, 0x8a, 0xc6, 0x72, 0x95, 0x8d, 0xbf, 0x15, 0xb3, 0xcd, 0xfc}}
	return a, nil
}

var _appengineTemplateRootHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x3f\x6f\xf3\x20\x10\xc6\xf7\x7c\x8a\x7b\xd9\x63\xd6\x57\x2a\x78\xe8\xbf\xb5\x1d\xdc\xa1\x23\x81\x8b\x7c\xa9\x0d\x16\x77\x72\x14\x59\xfe\xee\x95\x43\xac\x3a\xdd\xca\x00\x3c\x1c\x3f\x9e\x47\x9c\xf9\xf7\xfc\xf6\xd4\x7c\xbe\xbf\x40\x2b\x7d\x57\xef\xcc\xba\xa0\x0b\xf5\x0e\x00\xc0\xf4\x28\x0e\x7c\xeb\x32\xa3\x58\xf5\xd1\xbc\xee\xff\x2b\xd0\xdb\x62\x74\x3d\x5a\x35\x12\x9e\x87\x94\x45\x81\x4f\x51\x30\x8a\x55\x67\x0a\xd2\xda\x80\x23\x79\xdc\x5f\x85\xba\x71\x42\xd2\x61\x3d\x4d\x55\xb3\x6c\xe6\xd9\xe8\x72\x52\xaa\x1d\xc5\x2f\xc8\xd8\x59\xc5\x72\xe9\x90\x5b\x44\x51\xd0\x66\x3c\x5a\xa5\x59\x9c\x90\xd7\xc7\x14\xe5\x3a\x55\x9e\x59\xfd\x01\xf4\xcc\x3a\x26\x21\xdc\x82\xec\x33\x0d\x52\xc4\x32\x7c\x8a\x2c\x70\x48\x49\x58\xb2\x1b\xc0\xc2\x34\x55\x8f\xab\x9c\xe7\x87\x82\xe9\x95\x33\xba\xfc\x98\x39\xa4\x70\xb9\xbd\x19\x68\x04\x0a\x56\xb9\x61\x50\xb5\xd1\x81\xc6\x3b\x33\xe0\xec\x7f\x52\x9d\xd6\x50\x3d\xc5\xea\xc4\x0b\xb0\xcd\x74\xcf\x04\x62\xd1\x39\x25\xf9\x75\xd3\xe8\x62\x6f\x74\x69\xe3\x77\x00\x00\x00\xff\xff\x47\x84\x67\x47\xde\x01\x00\x00")

func appengineTemplateRootHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateRootHtml,
		"appengine/template/root.html",
	)
}

func appengineTemplateRootHtml() (*asset, error) {
	bytes, err := appengineTemplateRootHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/root.html", size: 478, mode: os.FileMode(0664), modTime: time.Unix(1588580441, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0x73, 0x75, 0x3d, 0xa2, 0x2c, 0xb3, 0xc8, 0xb6, 0xbf, 0x50, 0xd0, 0xf6, 0x1f, 0x47, 0x46, 0x3, 0xeb, 0x10, 0x56, 0x70, 0x44, 0x7b, 0x2a, 0x8b, 0x28, 0x87, 0x18, 0xd8, 0x66, 0x76, 0xa6}}
	return a, nil
}

var _appengineTemplateUHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x3d\x6f\xf3\x20\x10\xde\xf3\x2b\xee\x65\x4f\x58\x5f\xa9\xe0\xa5\x1f\x6b\x3b\xa4\x43\x47\x0a\x97\xf8\x52\x1b\x2c\xee\xe2\x28\xb2\xfc\xdf\x2b\x07\x47\xb5\x3b\x95\x01\x38\xee\xf9\x12\x67\xfe\x3d\xbd\x3e\xee\x3f\xde\x9e\xa1\x96\xb6\xa9\x36\xe6\x7e\xa0\x0b\xd5\x06\x00\xc0\xb4\x28\x0e\x7c\xed\x32\xa3\x58\xf5\xbe\x7f\xd9\xfe\x57\xa0\x97\xcd\xe8\x5a\xb4\xaa\x27\xbc\x74\x29\x8b\x02\x9f\xa2\x60\x14\xab\x2e\x14\xa4\xb6\x01\x7b\xf2\xb8\xbd\x15\x6a\xe6\x09\x49\x83\xd5\x30\xec\xf6\xd3\x65\x1c\x8d\x2e\x2f\xa5\xdb\x50\xfc\x82\x8c\x8d\x55\x2c\xd7\x06\xb9\x46\x14\x05\x75\xc6\x83\x55\x9a\xc5\x09\x79\x7d\x48\x51\x6e\xdb\xce\x33\xdf\x65\xd9\x67\xea\xa4\x14\xd3\xf2\x29\xb2\xc0\xd9\xe5\x23\x83\x85\x61\xd8\x8d\xe3\x43\x41\xea\x25\xf4\x4f\x86\x9e\x59\xc7\x2e\xa7\x63\x46\xe6\xd9\xd4\xe8\xf2\x51\xe6\x33\x85\xeb\xac\x15\xa8\x07\x0a\x56\xb9\xae\x53\x95\xd1\x81\xfa\x55\x38\xe0\xec\x7f\x44\x4f\x4b\xcd\x13\x4f\x84\x55\xb0\x15\x27\x10\x8b\x3e\xff\x82\x19\x5d\xbc\x8d\x2e\xa3\xfb\x0e\x00\x00\xff\xff\x60\xd4\xfe\x41\xd2\x01\x00\x00")

func appengineTemplateUHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateUHtml,
		"appengine/template/u.html",
	)
}

func appengineTemplateUHtml() (*asset, error) {
	bytes, err := appengineTemplateUHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/u.html", size: 466, mode: os.FileMode(0664), modTime: time.Unix(1588580445, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x36, 0x16, 0x98, 0xd9, 0xdf, 0x67, 0x1e, 0xaa, 0x80, 0xd4, 0x8d, 0xbb, 0x62, 0x4, 0xb7, 0x2e, 0xdd, 0xe7, 0x17, 0x5b, 0x78, 0x9d, 0x37, 0x8c, 0xe9, 0xe6, 0x49, 0xfa, 0xb1, 0x19, 0xd0, 0xf2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"appengine/template/content.html": appengineTemplateContentHtml,
	"appengine/template/root.html":    appengineTemplateRootHtml,
	"appengine/template/u.html":       appengineTemplateUHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"appengine": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"content.html": &bintree{appengineTemplateContentHtml, map[string]*bintree{}},
			"root.html":    &bintree{appengineTemplateRootHtml, map[string]*bintree{}},
			"u.html":       &bintree{appengineTemplateUHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
