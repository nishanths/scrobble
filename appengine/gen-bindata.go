// Code generated by go-bindata. DO NOT EDIT.
// sources:
// appengine/template/dashboard.html (540B)
// appengine/template/home.html (369B)
// appengine/template/u.html (466B)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appengineTemplateDashboardHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x3f\x6f\xc3\x20\x10\xc5\xf7\x7c\x8a\x2b\x7b\xcc\x5a\xa9\xe0\xa1\xff\xd6\x76\x48\x87\x8e\x04\x2e\xe2\x52\x1b\x2c\xee\xe4\x28\xb2\xfc\xdd\xab\x84\x58\x4d\x3a\x55\x65\x00\x1e\xc7\xef\xc1\x43\x98\xbb\xe7\xb7\xa7\xcd\xe7\xfb\x0b\x44\xe9\xbb\x76\x65\x96\x01\x5d\x68\x57\x00\x00\xa6\x47\x71\xe0\xa3\x2b\x8c\x62\xd5\xc7\xe6\x75\x7d\xaf\x40\x5f\x17\x93\xeb\xd1\xaa\x91\xf0\x30\xe4\x22\x0a\x7c\x4e\x82\x49\xac\x3a\x50\x90\x68\x03\x8e\xe4\x71\x7d\x16\xea\xc2\x09\x49\x87\xed\x34\x35\x9b\xd3\x64\x9e\x8d\xae\x2b\xb5\xda\x51\xfa\x82\x82\x9d\x55\x2c\xc7\x0e\x39\x22\x8a\x82\x58\x70\x67\x95\x66\x71\x42\x5e\xef\x72\x92\x73\xd7\x78\xe6\xc5\x96\x7d\xa1\x41\xaa\x38\x35\x9f\x13\x0b\x6c\x73\x16\x96\xe2\x06\xb0\x30\x4d\xcd\xe3\x22\xe7\xf9\xa1\x62\xfa\x9a\xfb\xff\xe9\x7f\x01\x3d\xb3\x4e\x59\x08\x2f\xa0\xd1\xf5\xa9\xcd\x36\x87\xe3\xc5\x27\xd0\x08\x14\xac\x72\xc3\xa0\x5a\xa3\x03\x8d\x37\xf1\x80\x8b\xff\x31\xdc\x2f\x7e\x3d\xa5\x66\xcf\x27\xe0\x26\xcd\x0d\x13\x88\x45\x07\xc7\x71\x9b\x5d\x09\xbf\xb6\x1b\x5d\xef\x60\x74\xfd\x04\xdf\x01\x00\x00\xff\xff\xab\x89\x16\x85\x1c\x02\x00\x00")

func appengineTemplateDashboardHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateDashboardHtml,
		"appengine/template/dashboard.html",
	)
}

func appengineTemplateDashboardHtml() (*asset, error) {
	bytes, err := appengineTemplateDashboardHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/dashboard.html", size: 540, mode: os.FileMode(0664), modTime: time.Unix(1589964885, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6e, 0xc7, 0xe0, 0xe4, 0x80, 0xf9, 0x33, 0xb0, 0xe3, 0x69, 0x93, 0x82, 0xf, 0x31, 0x18, 0xf2, 0x3b, 0x6e, 0x6c, 0xaa, 0xa8, 0x8f, 0x2c, 0xeb, 0x8a, 0x96, 0x1c, 0xd2, 0x2, 0x82, 0x27, 0xbe}}
	return a, nil
}

var _appengineTemplateHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x3f\x6f\xc3\x20\x10\xc5\xf7\x7c\x8a\xeb\xed\x31\x6b\xa5\x82\x87\xfe\x5b\xdb\x21\x1d\x3a\x12\xb8\xc8\xd7\xda\x60\x71\x27\x47\x91\xe5\xef\x5e\x39\xc4\x6a\xcb\x00\x3c\x1e\xef\x77\xba\xb3\x77\xcf\x6f\x4f\x87\xcf\xf7\x17\xe8\x74\xe8\xdb\x9d\xdd\x0e\xf2\xb1\xdd\x01\x00\xd8\x81\xd4\x43\xe8\x7c\x11\x52\x87\x1f\x87\xd7\xfd\x3d\x82\xf9\x6b\x26\x3f\x90\xc3\x89\xe9\x3c\xe6\xa2\x08\x21\x27\xa5\xa4\x0e\xcf\x1c\xb5\x73\x91\x26\x0e\xb4\xbf\x0a\xbc\xe5\x94\xb5\xa7\x76\x9e\x9b\xc3\x7a\x59\x16\x6b\xea\x4b\x75\x7b\x4e\xdf\x50\xa8\x77\x28\x7a\xe9\x49\x3a\x22\x45\xe8\x0a\x9d\x1c\x1a\x51\xaf\x1c\xcc\x29\x27\xbd\x6e\x4d\x10\xd9\xb0\x12\x0a\x8f\x5a\xc5\xba\x42\x4e\xa2\x70\xcc\x59\x45\x8b\x1f\xc1\xc1\x3c\x37\x8f\x9b\x5c\x96\x87\x1a\x33\x5b\xce\x9a\xda\xb8\x3d\xe6\x78\xb9\x31\x23\x4f\xc0\xd1\xa1\x1f\x47\x6c\xad\x89\x3c\xfd\x2b\x06\x52\x82\x43\x13\x59\xd4\x74\x79\xa0\xe6\x4b\xd6\x6f\xbf\xc4\x8a\xb2\xa6\x4e\xf6\x27\x00\x00\xff\xff\x2d\x96\x2c\xe0\x71\x01\x00\x00")

func appengineTemplateHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateHomeHtml,
		"appengine/template/home.html",
	)
}

func appengineTemplateHomeHtml() (*asset, error) {
	bytes, err := appengineTemplateHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/home.html", size: 369, mode: os.FileMode(0664), modTime: time.Unix(1589964885, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0xce, 0xd0, 0x99, 0x2, 0xf0, 0x9b, 0xa5, 0x57, 0x4, 0xb3, 0xcc, 0x65, 0x39, 0x38, 0xa5, 0x8c, 0x7c, 0x89, 0x28, 0xfa, 0x50, 0xc6, 0x14, 0x62, 0xe, 0x80, 0x68, 0x2d, 0x19, 0xf9, 0x20}}
	return a, nil
}

var _appengineTemplateUHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x3d\x6f\xf3\x20\x10\xde\xf3\x2b\xee\x65\x4f\x58\x5f\xa9\xe0\xa5\x1f\x6b\x3b\xa4\x43\x47\x0a\x97\xf8\x52\x1b\x2c\xee\xe2\x28\xb2\xfc\xdf\x2b\x07\x47\xb5\x3b\x95\x01\x38\xee\xf9\x12\x67\xfe\x3d\xbd\x3e\xee\x3f\xde\x9e\xa1\x96\xb6\xa9\x36\xe6\x7e\xa0\x0b\xd5\x06\x00\xc0\xb4\x28\x0e\x7c\xed\x32\xa3\x58\xf5\xbe\x7f\xd9\xfe\x57\xa0\x97\xcd\xe8\x5a\xb4\xaa\x27\xbc\x74\x29\x8b\x02\x9f\xa2\x60\x14\xab\x2e\x14\xa4\xb6\x01\x7b\xf2\xb8\xbd\x15\x6a\xe6\x09\x49\x83\xd5\x30\xec\xf6\xd3\x65\x1c\x8d\x2e\x2f\xa5\xdb\x50\xfc\x82\x8c\x8d\x55\x2c\xd7\x06\xb9\x46\x14\x05\x75\xc6\x83\x55\x9a\xc5\x09\x79\x7d\x48\x51\x6e\xdb\xce\x33\xdf\x65\xd9\x67\xea\xa4\x14\xd3\xf2\x29\xb2\xc0\xd9\xe5\x23\x83\x85\x61\xd8\x8d\xe3\x43\x41\xea\x25\xf4\x4f\x86\x9e\x59\xc7\x2e\xa7\x63\x46\xe6\xd9\xd4\xe8\xf2\x51\xe6\x33\x85\xeb\xac\x15\xa8\x07\x0a\x56\xb9\xae\x53\x95\xd1\x81\xfa\x55\x38\xe0\xec\x7f\x44\x4f\x4b\xcd\x13\x4f\x84\x55\xb0\x15\x27\x10\x8b\x3e\xff\x82\x19\x5d\xbc\x8d\x2e\xa3\xfb\x0e\x00\x00\xff\xff\x60\xd4\xfe\x41\xd2\x01\x00\x00")

func appengineTemplateUHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateUHtml,
		"appengine/template/u.html",
	)
}

func appengineTemplateUHtml() (*asset, error) {
	bytes, err := appengineTemplateUHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/u.html", size: 466, mode: os.FileMode(0664), modTime: time.Unix(1588580445, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x36, 0x16, 0x98, 0xd9, 0xdf, 0x67, 0x1e, 0xaa, 0x80, 0xd4, 0x8d, 0xbb, 0x62, 0x4, 0xb7, 0x2e, 0xdd, 0xe7, 0x17, 0x5b, 0x78, 0x9d, 0x37, 0x8c, 0xe9, 0xe6, 0x49, 0xfa, 0xb1, 0x19, 0xd0, 0xf2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"appengine/template/dashboard.html": appengineTemplateDashboardHtml,
	"appengine/template/home.html":      appengineTemplateHomeHtml,
	"appengine/template/u.html":         appengineTemplateUHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"appengine": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"dashboard.html": &bintree{appengineTemplateDashboardHtml, map[string]*bintree{}},
			"home.html":      &bintree{appengineTemplateHomeHtml, map[string]*bintree{}},
			"u.html":         &bintree{appengineTemplateUHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
