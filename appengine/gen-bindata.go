// Code generated by go-bindata. DO NOT EDIT.
// sources:
// appengine/template/content.html (543B)
// appengine/template/home.html (369B)
// appengine/template/root.html (478B)
// appengine/template/u.html (466B)
// appengine/helpguide.md (2.785kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appengineTemplateContentHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x31\x4f\xc3\x30\x10\x85\xf7\xfe\x8a\xe3\xf6\xd6\xea\xc6\x60\x67\x29\x20\x36\x10\x0a\x03\xa3\xb1\xaf\xd8\xc2\xb1\xa3\xf8\x94\xaa\xaa\xf2\xdf\x51\xe2\x14\xa5\x05\x21\xb1\x24\x77\xf7\xde\x7d\xd2\x3b\x59\xde\xdc\x3d\xed\xea\xb7\xe7\x7b\x70\xdc\x84\x6a\x25\xcf\x3f\xd2\xb6\x5a\x01\x00\xc8\x86\x58\x83\x71\xba\xcb\xc4\x0a\x5f\xeb\x87\xf5\x2d\x82\x58\x8a\x51\x37\xa4\xb0\xf7\x74\x68\x53\xc7\x08\x26\x45\xa6\xc8\x0a\x0f\xde\xb2\x53\x96\x7a\x6f\x68\x3d\x35\x38\xef\xb1\xe7\x40\xd5\xe9\x04\x9b\x7a\xac\x60\x18\xa4\x28\xb3\xa2\x07\x1f\x3f\xa1\xa3\xa0\x30\xf3\x31\x50\x76\x44\x8c\xe0\x3a\xda\x2b\x14\x99\x35\x7b\x23\xf6\x29\xf2\xf4\xd9\x98\x9c\xf1\x1f\x8b\x26\x67\xd1\xa5\x74\xde\x93\xa2\xa4\x95\xef\xc9\x1e\x67\x8c\xf5\x3d\x78\xab\x50\xb7\xed\x4c\xfe\x1e\x9b\xa0\x73\x56\xf8\x92\x12\x2f\xa4\x1f\xfa\xc8\xf4\xf1\xe3\xda\x32\xba\xdc\x76\x4a\xfe\x58\x1c\x53\x76\xb7\xbd\xf4\x49\x61\x7d\xff\x07\x7d\x3e\xf1\x2f\xf4\x91\xbc\x2b\x2a\x0c\xc3\x15\xe1\x92\xba\x68\xe7\x52\x8a\x72\x03\x29\xca\x3b\xf8\x0a\x00\x00\xff\xff\x64\x3a\xd1\x4b\x1f\x02\x00\x00")

func appengineTemplateContentHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateContentHtml,
		"appengine/template/content.html",
	)
}

func appengineTemplateContentHtml() (*asset, error) {
	bytes, err := appengineTemplateContentHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/content.html", size: 543, mode: os.FileMode(0644), modTime: time.Unix(1589105444, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0x36, 0x53, 0x9c, 0xb7, 0xb8, 0x70, 0x33, 0xa3, 0x54, 0x4e, 0x71, 0x1c, 0xd8, 0xf9, 0x73, 0x49, 0xfd, 0x19, 0x1a, 0xcf, 0x4b, 0x8a, 0xc6, 0x72, 0x95, 0x8d, 0xbf, 0x15, 0xb3, 0xcd, 0xfc}}
	return a, nil
}

var _appengineTemplateHomeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x3f\x6f\xc3\x20\x10\xc5\xf7\x7c\x8a\xeb\xed\x31\x6b\xa5\x82\x87\xfe\x5b\xdb\x21\x1d\x3a\x12\xb8\xc8\xd7\xda\x60\x71\x27\x47\x91\xe5\xef\x5e\x39\xc4\x6a\xcb\x00\x3c\x1e\xef\x77\xba\xb3\x77\xcf\x6f\x4f\x87\xcf\xf7\x17\xe8\x74\xe8\xdb\x9d\xdd\x0e\xf2\xb1\xdd\x01\x00\xd8\x81\xd4\x43\xe8\x7c\x11\x52\x87\x1f\x87\xd7\xfd\x3d\x82\xf9\x6b\x26\x3f\x90\xc3\x89\xe9\x3c\xe6\xa2\x08\x21\x27\xa5\xa4\x0e\xcf\x1c\xb5\x73\x91\x26\x0e\xb4\xbf\x0a\xbc\xe5\x94\xb5\xa7\x76\x9e\x9b\xc3\x7a\x59\x16\x6b\xea\x4b\x75\x7b\x4e\xdf\x50\xa8\x77\x28\x7a\xe9\x49\x3a\x22\x45\xe8\x0a\x9d\x1c\x1a\x51\xaf\x1c\xcc\x29\x27\xbd\x6e\x4d\x10\xd9\xb0\x12\x0a\x8f\x5a\xc5\xba\x42\x4e\xa2\x70\xcc\x59\x45\x8b\x1f\xc1\xc1\x3c\x37\x8f\x9b\x5c\x96\x87\x1a\x33\x5b\xce\x9a\xda\xb8\x3d\xe6\x78\xb9\x31\x23\x4f\xc0\xd1\xa1\x1f\x47\x6c\xad\x89\x3c\xfd\x2b\x06\x52\x82\x43\x13\x59\xd4\x74\x79\xa0\xe6\x4b\xd6\x6f\xbf\xc4\x8a\xb2\xa6\x4e\xf6\x27\x00\x00\xff\xff\x2d\x96\x2c\xe0\x71\x01\x00\x00")

func appengineTemplateHomeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateHomeHtml,
		"appengine/template/home.html",
	)
}

func appengineTemplateHomeHtml() (*asset, error) {
	bytes, err := appengineTemplateHomeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/home.html", size: 369, mode: os.FileMode(0644), modTime: time.Unix(1589387712, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0xce, 0xd0, 0x99, 0x2, 0xf0, 0x9b, 0xa5, 0x57, 0x4, 0xb3, 0xcc, 0x65, 0x39, 0x38, 0xa5, 0x8c, 0x7c, 0x89, 0x28, 0xfa, 0x50, 0xc6, 0x14, 0x62, 0xe, 0x80, 0x68, 0x2d, 0x19, 0xf9, 0x20}}
	return a, nil
}

var _appengineTemplateRootHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x3f\x6f\xf3\x20\x10\xc6\xf7\x7c\x8a\x7b\xd9\x63\xd6\x57\x2a\x78\xe8\xbf\xb5\x1d\xdc\xa1\x23\x81\x8b\x7c\xa9\x0d\x16\x77\x72\x14\x59\xfe\xee\x95\x43\xac\x3a\xdd\xca\x00\x3c\x1c\x3f\x9e\x47\x9c\xf9\xf7\xfc\xf6\xd4\x7c\xbe\xbf\x40\x2b\x7d\x57\xef\xcc\xba\xa0\x0b\xf5\x0e\x00\xc0\xf4\x28\x0e\x7c\xeb\x32\xa3\x58\xf5\xd1\xbc\xee\xff\x2b\xd0\xdb\x62\x74\x3d\x5a\x35\x12\x9e\x87\x94\x45\x81\x4f\x51\x30\x8a\x55\x67\x0a\xd2\xda\x80\x23\x79\xdc\x5f\x85\xba\x71\x42\xd2\x61\x3d\x4d\x55\xb3\x6c\xe6\xd9\xe8\x72\x52\xaa\x1d\xc5\x2f\xc8\xd8\x59\xc5\x72\xe9\x90\x5b\x44\x51\xd0\x66\x3c\x5a\xa5\x59\x9c\x90\xd7\xc7\x14\xe5\x3a\x55\x9e\x59\xfd\x01\xf4\xcc\x3a\x26\x21\xdc\x82\xec\x33\x0d\x52\xc4\x32\x7c\x8a\x2c\x70\x48\x49\x58\xb2\x1b\xc0\xc2\x34\x55\x8f\xab\x9c\xe7\x87\x82\xe9\x95\x33\xba\xfc\x98\x39\xa4\x70\xb9\xbd\x19\x68\x04\x0a\x56\xb9\x61\x50\xb5\xd1\x81\xc6\x3b\x33\xe0\xec\x7f\x52\x9d\xd6\x50\x3d\xc5\xea\xc4\x0b\xb0\xcd\x74\xcf\x04\x62\xd1\x39\x25\xf9\x75\xd3\xe8\x62\x6f\x74\x69\xe3\x77\x00\x00\x00\xff\xff\x47\x84\x67\x47\xde\x01\x00\x00")

func appengineTemplateRootHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateRootHtml,
		"appengine/template/root.html",
	)
}

func appengineTemplateRootHtml() (*asset, error) {
	bytes, err := appengineTemplateRootHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/root.html", size: 478, mode: os.FileMode(0644), modTime: time.Unix(1589105444, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0x73, 0x75, 0x3d, 0xa2, 0x2c, 0xb3, 0xc8, 0xb6, 0xbf, 0x50, 0xd0, 0xf6, 0x1f, 0x47, 0x46, 0x3, 0xeb, 0x10, 0x56, 0x70, 0x44, 0x7b, 0x2a, 0x8b, 0x28, 0x87, 0x18, 0xd8, 0x66, 0x76, 0xa6}}
	return a, nil
}

var _appengineTemplateUHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x3d\x6f\xf3\x20\x10\xde\xf3\x2b\xee\x65\x4f\x58\x5f\xa9\xe0\xa5\x1f\x6b\x3b\xa4\x43\x47\x0a\x97\xf8\x52\x1b\x2c\xee\xe2\x28\xb2\xfc\xdf\x2b\x07\x47\xb5\x3b\x95\x01\x38\xee\xf9\x12\x67\xfe\x3d\xbd\x3e\xee\x3f\xde\x9e\xa1\x96\xb6\xa9\x36\xe6\x7e\xa0\x0b\xd5\x06\x00\xc0\xb4\x28\x0e\x7c\xed\x32\xa3\x58\xf5\xbe\x7f\xd9\xfe\x57\xa0\x97\xcd\xe8\x5a\xb4\xaa\x27\xbc\x74\x29\x8b\x02\x9f\xa2\x60\x14\xab\x2e\x14\xa4\xb6\x01\x7b\xf2\xb8\xbd\x15\x6a\xe6\x09\x49\x83\xd5\x30\xec\xf6\xd3\x65\x1c\x8d\x2e\x2f\xa5\xdb\x50\xfc\x82\x8c\x8d\x55\x2c\xd7\x06\xb9\x46\x14\x05\x75\xc6\x83\x55\x9a\xc5\x09\x79\x7d\x48\x51\x6e\xdb\xce\x33\xdf\x65\xd9\x67\xea\xa4\x14\xd3\xf2\x29\xb2\xc0\xd9\xe5\x23\x83\x85\x61\xd8\x8d\xe3\x43\x41\xea\x25\xf4\x4f\x86\x9e\x59\xc7\x2e\xa7\x63\x46\xe6\xd9\xd4\xe8\xf2\x51\xe6\x33\x85\xeb\xac\x15\xa8\x07\x0a\x56\xb9\xae\x53\x95\xd1\x81\xfa\x55\x38\xe0\xec\x7f\x44\x4f\x4b\xcd\x13\x4f\x84\x55\xb0\x15\x27\x10\x8b\x3e\xff\x82\x19\x5d\xbc\x8d\x2e\xa3\xfb\x0e\x00\x00\xff\xff\x60\xd4\xfe\x41\xd2\x01\x00\x00")

func appengineTemplateUHtmlBytes() ([]byte, error) {
	return bindataRead(
		_appengineTemplateUHtml,
		"appengine/template/u.html",
	)
}

func appengineTemplateUHtml() (*asset, error) {
	bytes, err := appengineTemplateUHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/template/u.html", size: 466, mode: os.FileMode(0644), modTime: time.Unix(1589105444, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x36, 0x16, 0x98, 0xd9, 0xdf, 0x67, 0x1e, 0xaa, 0x80, 0xd4, 0x8d, 0xbb, 0x62, 0x4, 0xb7, 0x2e, 0xdd, 0xe7, 0x17, 0x5b, 0x78, 0x9d, 0x37, 0x8c, 0xe9, 0xe6, 0x49, 0xfa, 0xb1, 0x19, 0xd0, 0xf2}}
	return a, nil
}

var _appengineHelpguideMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x6d\x6f\x1b\x37\x0c\xfe\x7e\xbf\x82\x75\x3e\x34\x2e\xbc\x73\x9b\x0e\x18\xd0\xae\x0b\xda\xec\xa5\x05\xb6\x35\x40\x82\x15\x45\x10\xb4\xb2\x44\xdf\x09\xd1\x89\x9a\x5e\x7c\xb8\xfd\xfa\x81\xd2\xdd\xd5\x76\xb2\xb5\x9f\x12\x4b\x22\xf9\xf0\xe1\x43\xf2\x4e\x4e\xe0\x43\x2b\x22\xe8\x00\xb1\xd5\xe1\xbc\xaa\x3e\x5d\x49\x4f\x9b\x8d\xc1\x4f\x7c\x28\xa0\x4b\x41\x4b\x08\xe5\x50\xdb\x06\x02\xfa\x9d\x96\x08\x91\xed\x7a\xf2\x77\x01\x7a\x1d\x5b\x78\xed\x9c\x41\xf8\x83\x9f\xd7\x55\x75\xdd\x22\x44\xf4\xdd\xbe\xa5\xc7\x2d\xfa\x00\x91\x20\xb6\x08\x42\x46\xa0\x2d\xb8\xb4\x31\x3a\xb4\x7c\xcf\xa7\x81\x6c\x13\x60\xa0\x04\x46\x87\x88\x36\xbf\x26\x10\x16\xc8\x1a\x6d\x11\xb6\x88\x6a\xf4\x3f\x21\x91\x64\x83\x0e\x31\xb0\xbb\xd8\x13\x38\xe1\x63\x78\x51\x55\xcf\x6a\xc6\x2f\xe4\xfb\x2b\x10\xce\x19\x2d\x45\xd4\x64\xa1\x6f\xb5\x6c\x21\x39\x43\x42\xe5\x50\x7e\x1f\xfb\x18\x97\xf1\xb4\x3a\x44\xf2\xc3\x4b\x10\x56\x55\x67\x75\x66\x08\x7a\xdc\x3c\xe0\x4d\xe9\xe0\x8c\x18\x46\x77\xec\x82\xc1\x8c\xb9\xa3\x2a\x69\xd5\x55\x75\x72\x02\x6f\xa9\x07\x45\x39\xc5\x06\x23\x84\x28\x7c\x44\x75\x5e\x55\xd7\x04\x1b\x6c\xb4\x3d\x20\x9b\xed\x4a\x2a\x3b\x1d\x74\xcc\x1c\x8d\x10\x40\x44\x68\x63\x74\xe1\xc5\x7a\x3d\x45\xaa\x8d\x8e\xd1\xa0\x27\x8a\x35\xf9\xe6\x25\x1b\x06\xdd\x58\xd0\xb6\x54\xe9\x37\xa2\xc6\x20\x67\x04\x4e\xcb\xbb\x82\x37\x05\xf4\x56\x74\x98\x9f\x4b\x72\x43\x0e\xf3\xfa\xf2\x1d\xdc\xe1\x90\x0f\x15\xf5\x96\xf9\xca\x17\x37\x33\xa7\xb7\xfc\x2f\x85\xdb\xfc\x06\x6d\x44\x9f\x1f\x48\x72\x1a\xd5\xe4\x80\x63\xf3\xe9\x6c\x55\x57\xd5\x47\x0e\x7b\x44\x0f\x48\x61\x61\xc3\x65\x45\xcb\xb9\x7d\xfe\x4a\x72\xeb\xb4\x9e\x80\x7f\x2e\xd4\xb2\x28\x9c\xa7\xad\x36\x08\x4e\x34\x58\x64\xb2\x7f\xf2\xa5\x50\xf7\x6b\xf3\x91\x52\x86\xb0\xd5\x86\x13\xd9\x0c\xb0\x78\x6d\xcc\x02\x4e\x8f\x4a\x2c\x8c\x39\xb6\x5e\xae\x60\xf1\x3b\xed\x50\xdd\x7f\x5d\x52\x33\xfa\x0e\x15\x90\xdd\x57\xda\x72\x05\xe4\x61\xf1\x66\x00\x49\x86\xfc\x03\xa6\x47\xfc\x6c\x06\x10\x3e\x72\xcb\x15\x8b\x65\x5d\x55\x8f\x6e\x02\x36\x1d\x53\xaf\xb8\x0f\xa2\x27\x73\x7b\x3a\x11\xa7\xbb\x26\xf9\x5a\x52\xb7\xbe\xf8\xe7\x6c\xf7\xfc\xec\x07\x53\x3b\xdb\x2c\x67\xae\x4a\x45\x3a\xb4\x09\x36\xc2\xef\xcb\xba\x30\x37\x57\x6c\x35\xca\x7c\x42\xf4\x2d\x6d\xb3\x9a\xea\x39\x69\x07\x15\xdc\xb4\xe8\x71\x12\x4d\x5d\x55\x17\x86\x35\x48\x45\x1f\x2c\x69\x2d\xc9\xce\x7a\x19\x71\xad\xb2\x5a\x65\x4b\x14\x10\x16\x57\xdc\x2f\x7b\x2d\x52\xd7\xf5\xa2\x86\x5f\xb2\xf6\x0a\xa8\x43\xd5\x29\x2d\x0c\x35\x3c\x43\x8e\x9b\xab\xae\xaa\x1f\x75\xd7\x40\xf0\xf2\xd5\xe2\x3e\x65\x7f\x5d\xbf\xff\xb5\x7d\x7a\xc6\x8c\x2d\xa0\x45\xdd\xb4\xf1\xd5\xf3\xa7\x4f\x61\xfd\x53\xe6\xef\x42\xd8\xdc\xc3\x13\x25\xb9\xbd\x28\xc5\x79\xe4\x48\xea\x5c\x8a\xe8\xcf\x33\x97\x1e\x79\x9c\x5a\x02\x14\x61\x80\x5e\x0c\x20\x93\xf7\x68\xa3\x19\x18\xdb\xec\x25\xa7\x50\xca\xfd\x5f\x0e\x6b\xb8\x34\x28\x02\xc2\x8d\xf4\x28\x22\x37\x33\xe8\x10\x12\xde\xde\xe4\x3f\xe1\x36\x4f\x4c\xa5\x0e\x06\x49\x72\x8e\x7c\xe4\x1b\x4b\xf6\xbb\x43\x8f\x93\xfa\x3b\x31\xac\xa0\xa5\x1e\x77\xe8\x57\x3c\x15\x32\x83\x6f\xaf\xaf\x2f\x33\xab\x0f\xe3\xac\xb3\x94\xf8\x3e\x27\x18\x41\x91\x4c\xa3\x22\x07\x8c\x70\xfa\x68\xb9\x82\x4d\x2a\xa3\xeb\x26\x50\xf2\x79\x64\x2b\xbc\x1d\x7f\xdc\xe6\x45\xb3\x13\xda\x08\x6e\xf2\x19\x0a\x84\xa8\x8d\x99\x61\x1c\x0f\x5e\xae\xa8\xa7\x3e\x4c\x3b\x23\xef\xa3\x0c\x6b\xeb\x35\x5a\x15\xa0\x15\x3b\xfc\xd2\x44\x65\x44\x7c\x60\x97\x65\xa7\x1d\x2e\x19\xb2\x40\xb1\x45\x0f\x0a\x79\xa9\x04\x38\xc5\xa6\x06\x7d\xd9\x92\xc5\x65\x1e\x4b\x93\xa3\xf3\xaa\xfa\x88\x61\x05\x7a\x9b\x5d\x4c\xf8\x82\xe8\xf0\xa0\x23\x84\x94\x94\x6c\x64\xcf\x19\x56\xf1\x95\xc5\x3c\x1d\x1d\x17\xf6\x0a\x47\x5f\x28\x73\x8e\x1b\x34\xd4\xc3\x96\x18\x55\x14\xda\x04\xb6\x6c\xa9\x1f\x57\x11\x2f\xdf\x92\xd6\xcf\x68\x44\x96\xfc\x38\x3c\xb8\xe4\x65\x15\x89\x88\x21\x16\x8a\x58\x88\x3a\x94\xb5\x7e\x67\xa9\x1f\x65\x03\x2a\x61\x56\x0c\x18\xdd\xe9\x58\xd8\xe5\x7d\xd1\xa2\x3d\x70\x72\xaf\xc5\x0f\x0a\x37\x35\xdc\x3e\x05\x0a\xc3\x5d\x24\x57\xb6\x95\x2d\xdb\x43\x5f\x27\x8b\x21\x1f\x9d\x3a\x8f\xa3\x14\x2f\x44\x14\x46\x5b\xb1\x1c\x77\xbb\xca\x09\x29\x74\xb9\x92\x64\x41\xc0\x16\x7b\xd8\x0a\x19\xc9\xf3\x46\x7c\x72\x2f\xd8\x3c\xad\x72\xa8\xbd\x30\x51\xdc\x21\x78\x4a\x4d\x6b\x06\x78\x76\xd6\x72\xb2\xc9\x29\x6e\x1d\xe6\x0a\x72\x99\xb8\xa0\x56\x9a\xa4\x38\x3f\x43\x52\x98\xfd\xcb\x97\xd5\x93\x99\x8f\xc7\x3b\x04\x23\x78\xc3\x3b\xb4\xa8\xfe\x07\xc7\xe9\x34\xd6\xba\x14\x22\x6b\x88\x2d\x1e\x8e\xbe\x2c\x5f\x19\x4f\xf6\x36\xe5\xdc\x6b\xc2\xb9\xc7\x61\xfc\x60\x81\xad\xc7\xbf\x13\x5a\x39\xf0\x07\xc6\xd9\xf7\x6d\xa9\xff\xbb\x90\x21\xd5\xdb\x8e\x77\x4a\xd0\x9d\x36\xc2\xcf\x4d\x3f\x0e\x58\x4f\x42\x75\xc2\x9d\x57\xd5\x9f\x54\xc3\x9b\x14\xc1\x7d\x6d\x90\x14\x8d\x3f\xe6\xe9\xc5\x13\x16\x43\xcc\x8d\x34\xdd\xbf\x98\x3f\x40\x1a\x1d\xdb\xb4\xc9\x83\xd3\xea\xd0\x0a\x1b\xdb\x30\x2f\xee\x75\x79\xbe\xb6\xd8\x57\x53\xd3\x7f\xa3\x69\x35\x2e\x8b\x6f\x8d\xe4\x31\xa7\x14\xd6\x45\xb3\xd5\xbf\x01\x00\x00\xff\xff\xc1\xf4\x81\x22\xe1\x0a\x00\x00")

func appengineHelpguideMdBytes() ([]byte, error) {
	return bindataRead(
		_appengineHelpguideMd,
		"appengine/helpguide.md",
	)
}

func appengineHelpguideMd() (*asset, error) {
	bytes, err := appengineHelpguideMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "appengine/helpguide.md", size: 2785, mode: os.FileMode(0644), modTime: time.Unix(1589105444, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb9, 0xd8, 0x1b, 0xca, 0x3a, 0x2b, 0xf6, 0x5, 0x15, 0xce, 0x65, 0x3b, 0x31, 0x28, 0x71, 0x82, 0x47, 0xb4, 0x29, 0xb, 0x9f, 0x10, 0x12, 0x53, 0xf4, 0x41, 0xff, 0xa8, 0xb8, 0x87, 0x3d, 0x45}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"appengine/template/content.html": appengineTemplateContentHtml,
	"appengine/template/home.html":    appengineTemplateHomeHtml,
	"appengine/template/root.html":    appengineTemplateRootHtml,
	"appengine/template/u.html":       appengineTemplateUHtml,
	"appengine/helpguide.md":          appengineHelpguideMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"appengine": &bintree{nil, map[string]*bintree{
		"helpguide.md": &bintree{appengineHelpguideMd, map[string]*bintree{}},
		"template": &bintree{nil, map[string]*bintree{
			"content.html": &bintree{appengineTemplateContentHtml, map[string]*bintree{}},
			"home.html":    &bintree{appengineTemplateHomeHtml, map[string]*bintree{}},
			"root.html":    &bintree{appengineTemplateRootHtml, map[string]*bintree{}},
			"u.html":       &bintree{appengineTemplateUHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
